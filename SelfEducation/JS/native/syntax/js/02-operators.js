/*********************************************/
/*Основные операторы JS.*/
// Арифметические операторы * / + - % (процент от деления).
// Операнды это то с чем работают операторы (если говорим о арифметических операторах то это числа).
// Унарный оператор - это оператор который применяется к одному выражению.
// Например унарный минус меняет знак на противоположный:
var x = 1;
var y = 2;

alert(y-x); // 1
x = -x; // -1

// Сложение строк.
var a = "hello" + "world";
alert(a); // helloworld - пробела нет, чтобы он был нужно в одном из элементов его поставить

// Сложение строк и чисел.
alert("5" + 2); // 52
// При сложении разных типов данных таких как строка и число, не важно в каком порядке они стоят.
// Все и всегда будет приводится к строке.
// А вот при вычитании, делении, умножении и получении остатка от деления все гораздо интереснее
// - строка приводится к числу и происходит мат.

// Операция между числами.
// Опять же порядок расстановки операндов не имеет значение
alert("5" - 2); // 3

// Приоритет выполнения операций.
// В js есть определенный порядок расстановки приоритетов при выполнении различных мат. операций.
// Например: 5 * 2 + 3 (сначала умножение потом сложение)
// Есть специальная таблица с приоритетами:
// https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Operator_Precedence
// Если же операторы обладают одинаковыми приоритетами то операции выполняются слева направо по порядку.
// Если нужно задать приоритет какой то операции умышленно то нужно заключить операцию в скобки.
var e = (2 + 2) * 5; // 20, а не 12 - сначала выполнится сложение а потом умножение.

// Присваивание.
// У присваивания низкий приоритет (3).
var b = 33 * 22 + 11; // Сначала мат. операции затем присваивание.

// Взятие остатка от деления.
// Несмотря на своё обозначение, отношение к проценту он не имеет.
// Его результат это целое число после делени одного операнда на другой.
alert(7 % 2);// 1 - тут определить очень легко, сколько целых двоек в числе 7?
// Ответ - 3. Если 3 * 2 будет 6. 7 - 6 остается 1, что и является результатом.

// Инкремент и декремент.
// Одна из самых частых операций в js и других языках.
// Инкремент (++) увеличивает на 1.
// Декремент (--) уменьшает на 1.
// Нет таких вещей как +++ и --- или чего то подобного что может увеличить/уменьшить на больше чем 1.
var d = 5;
var e = d++; // 6
// В зависимости от того, с какой стороны перед переменной будет указан ++/-- будет происходить одно из:
// если перед числом (префиксная форма записи) сначала новое число, потом приращение;
// если после (постфиксная форма записи) сначала прежнее число, потом приращение.
// Инкремент/декремент работает только с переменной. Если применить его напрямую к числу будет ошибка.

// Арифметика с присваиванием.
var k = 2;
k += 5;
alert(k); // 7 - поскольку у присваивания приоритет ниже чем у сложения, то сначала выполнится мат. операция,
// а потом произойдет присваивание

// Запятая.
// Запятая позволяет создавать перечисление операций, но при обращении к переменной, в которой все это
// хранится - будет возвращено то, что стоит после последней запятой.
// Если честно даже представить себе не могу когда и где это может понадобится.

var m = (2 + 1, 5 + 2,7 + 3);
var m = 2 + 1.5 + 2.7 + 3;
alert(m);